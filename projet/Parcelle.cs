public class Parcelle
{
    public Plante? Plante { get; set; }
    public int Luminosite { get; set; } = 0;
    public int Eau { get; set; } = 0;
    public bool EstOrigine { get; set; } = true;
    public string LigneHaut()
    {
        if (Plante == null)
            return "    "; // 5 espaces pour alignement

        if (EstOrigine)
            return $"{Plante.Initiale} {Plante.GetEmojiStade()}";

        return $"  {Plante.Initiale} "; // 3 caract√®res centr√©s : juste l'initiale
    }
    public string LigneBas()
    {
        if (Plante != null && !EstOrigine)
            return "   ";
        return $"{Luminosite}  {NombreVersEmoji(Eau)}";
    }

    public string NombreVersEmoji(int nombre)
    {
        return nombre switch
        {
            0 => "0Ô∏è‚É£",
            1 => "1Ô∏è‚É£",
            2 => "2Ô∏è‚É£",
            3 => "3Ô∏è‚É£",
            4 => "4Ô∏è‚É£",
            5 => "5Ô∏è‚É£",
            6 => "6Ô∏è‚É£",
            7 => "7Ô∏è‚É£",
            8 => "8Ô∏è‚É£",
            9 => "9Ô∏è‚É£",
            _ => "‚ùì"
        };
    }
    public void AppliquerCroissance(Meteo meteo)
    {
        if (Plante == null || !EstOrigine) return;

        int conditionsRemplies = 0;
        int totalConditions = 4;

        // Condition 1 : Temp√©rature dans la plage
        if (meteo.Temperature >= Plante.TempMin && meteo.Temperature <= Plante.TempMax)
            conditionsRemplies++;

        // Condition 2 : Luminosit√© suffisante
        double proportionLumi = Luminosite / 10.0;
        if (proportionLumi >= Plante.BesoinLuminosite)
            conditionsRemplies++;

        // Condition 3 : Eau suffisante
        if (Eau >= Plante.BesoinEau)
            conditionsRemplies++;

        // Condition 4 : Espacement (√† impl√©menter plus tard si pas fait)
        bool espacementCorrect = true; // simplifi√© pour l‚Äôinstant
        if (espacementCorrect)
            conditionsRemplies++;

        // Calcul du pourcentage de conditions
        double tauxConditions = conditionsRemplies / (double)totalConditions;

        // Appliquer croissance
        if (tauxConditions == 0)
        {
            Plante.StadeCroissance = 4; // Mort
        }
        else if (tauxConditions < 0.5)
        {
            // Ne pousse pas
        }
        else
        {
            double tauxPousse = tauxConditions >= 1.0 ? 1.0 : 0.5;
            Plante.CroissanceActuelle += Plante.VitesseCroissance * tauxPousse;

            // Mettre √† jour le stade visuel
            if (Plante.CroissanceActuelle >= 1.0)
            {
                Plante.CroissanceActuelle = 1.0;
                Plante.StadeCroissance = 3; // üíê
                if (Plante.SemainesDepuisMaturite == 0)
                {
                    Plante.SemainesDepuisMaturite = 0;
                }    
            
            }
            else if (Plante.CroissanceActuelle >= 0.67)
            {
                Plante.StadeCroissance = 2; // üå≥
            }
            else if (Plante.CroissanceActuelle >= 0.34)
            {
                Plante.StadeCroissance = 1; // üåø
            }
            else
            {
                Plante.StadeCroissance = 0; // üå±
            }
        }

        // G√©rer la mort apr√®s 2 semaines de maturit√© sans r√©colte
        if (Plante.CroissanceActuelle == 1.0)
        {
            Plante.SemainesDepuisMaturite++;
            if (Plante.SemainesDepuisMaturite > 2)
            {
                Plante.StadeCroissance = 4; // ‚ò†Ô∏è
            }
        }
    }
    public string Affichage()
    {
        if (Plante == null)
            return " . ";

        if (EstOrigine)
            return $" {Plante.NomPlante[0]} "; // Premi√®re lettre de la plante
        else
            return " * "; // Marque que c‚Äôest une case d√©pendante
    }
}